@inject ParametersManager ParameterManager
@model SignInModel

@{
    ViewData["Title"] = Labels.SignIn;
    var successMessage = (IEnumerable<string>) TempData["SuccessMessage"];
    var errorMessage = (IEnumerable<string>) TempData["ErrorMessage"];
    var emailSenderEnabled = await ParameterManager.GetValue<bool>(Parameter.Types.EmailSenderEnabled);
}

@section Headers
{
    <script>
    $(() => {
        let messageContainer = $(".form .message");
        let form = $(".form");
        
        form.on("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                return false;
            }
        });
        
        form.form({
        on: "blur",
        fields: {
            username: {
                identifier: "username",
                rules: [
                    {
                        type: "empty",
                        prompt: "@ValidationMessages.UsernameRequired"
                    },
                    {
                        type: "minLength[3]",
                        prompt: "@ValidationMessages.MinimumUsernameLength"
                    }
                ]
            },
            password: {
                identifier: "password",
                rules: [
                    {
                        type: "empty",
                        prompt: "@ValidationMessages.PasswordRequired"
                    },
                    {
                        type: "minLength[8]",
                        prompt: "@ValidationMessages.MinimumPasswordLength"
                    }
                ]
            }
        }
        }).api({
        url: "@Url.Action("SignIn")",
        serializeForm: true,
        method: "POST",
        onSuccess: response => window.location.href = response.destination,
        onFailure: response => Array.isArray(response.messages) ? addError(messageContainer, response) : addError(messageContainer, buildFakeResponse(["@OtherMessages.RequestFailed"])),
        onError: () => addError(messageContainer, buildFakeResponse(["@OtherMessages.RequestFailed"]))
        });
    });
    </script>
}

<div class="ui middle aligned center aligned grid h-100p">
    <div class="column mw-450px">
        <h2 class="ui image header mt-minus-100px">
            <img class="image mt-minus-100px" src="~/assets/logo_d.png" alt="Logo">
            <div class="content">
                @Labels.SignInToAccount
            </div>
        </h2>
        <form class="ui large form" novalidate>
            <div class="ui segment">
                <div class="field">
                    <div class="ui left icon input">
                        <i class="user icon"></i>
                        <input type="text" name="username" placeholder="@Labels.Username" asp-for="Username">
                    </div>
                </div>
                <div class="field">
                    <div class="ui left icon input">
                        <i class="lock icon"></i>
                        <input type="password" name="password" placeholder="@Labels.Password" asp-for="Password">
                    </div>
                </div>
                <div class="ui fluid large black submit button">@Labels.SignIn</div>
            </div>
            @if (successMessage == null && errorMessage == null)
            {
                <div class="ui message error"></div>
            }
            else
            {
                <div class="ui message @(successMessage == null ? "error" : "success") visible">
                    <ul class="list">
                        @foreach (var item in successMessage ?? errorMessage)
                        {
                            <li>@item</li>
                        }
                    </ul>
                </div>
            }
        </form>
        @if (emailSenderEnabled)
        {
            <div class="ui message">
                @Labels.ForgotPassword2 <a href="@Url.Action("ForgotPassword")">@Labels.ResetIt</a>
            </div>   
        }
    </div>
</div>