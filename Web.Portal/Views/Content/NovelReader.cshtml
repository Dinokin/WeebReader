@inject ParametersManager ParametersManager
@model (Novel novel, NovelChapter chapter, NovelChapterContent content)

@{
    ViewData["Title"] = $"{Labels.Chapter} {Model.chapter.Number} - {Model.novel.Name}";
    var darkMode = (string) ViewData["BodyClass"] != Constants.LightModeClasses;
    var previousChapter = (Guid?) ViewData["PreviousChapter"];
    var nextChapter = (Guid?) ViewData["NextChapter"];
    var disqusEnabled = await ParametersManager.GetValue<bool>(Parameter.Types.PageDisqusEnabled);

    if (disqusEnabled)
    {
        ViewData["DisqusIdentifier"] = $"chapter_{Model.chapter.Id}";
        ViewData["DisqusTitle"] = $"{Labels.Chapter} {Model.chapter.Number} - {Model.novel.Name}";
    }
}

@section Headers
{
    <meta property="og:title" content="@(Model.chapter.Volume != null && Model.chapter.Volume > 0 ? $"{Labels.Vol}{Model.chapter.Volume} " : null)@Labels.Chapter @Model.chapter.Number - @Model.novel.Name"/>
    <meta property="og:url" content="@Url.Action("ReadChapter", "Content", new { chapterId = Model.chapter.Id }, Context.Request.Scheme)"/>
    <meta property="og:image" content="@($"{Context.Request.Scheme}://{Context.Request.Host}/content/{Model.novel.Id}/cover_thumb.jpg")"/>
    <meta property="og:description" content="@Model.novel.Synopsis.RemoveHtmlTags()"/>
    <meta property="og:site_name" content="@(await ParametersManager.GetValue<string>(Parameter.Types.SiteName))"/>
    <script>
    const chapterListRoute = "@Url.Action("TitlesJson", new {titleId = Model.novel.Id})";
    const chapterLabel = "@Labels.Chapter";
    const chapterNumber = @Html.Raw(Model.chapter.Number);
    </script>
    <script src="~/libs/weebreader/main/reader-shared.js" asp-append-version="true"></script>
    <script src="~/libs/weebreader/main/reader-novel.js" asp-append-version="true"></script>
}
<button id="jump-button" class="ui black button"><i class="icon chevron up no-margin-left no-margin-right"></i></button>
<div class="ui container">
    <div class="ui centered grid no-margin-top no-margin-bottom">
        <div class="row no-padding add-ellipsis"><a class="section" href="@Url.Action("Titles", new {titleId = Model.novel.Id})">@Model.novel.Name</a></div>
        <div class="row">
            <div id="chapter-selector" class="ui scrolling @(darkMode ? "inverted" : null) dropdown mr-1rem">
                <input type="hidden" value="@Url.Action("ReadChapter", new {chapterId = Model.chapter.Id})"/>
                <div class="text">@Labels.Chapter @Model.chapter.Number</div>
                <i class="dropdown icon"></i>
                <div class="menu">
                </div>
            </div>
            <div id="options" class="clickable">
                <i class="eye outline @(darkMode ? "inverted" : "black") icon"></i>
            </div>
        </div>
    </div>
</div>

<div id="popup" class="ui popup bottom center hidden">
    <div class="ui link list">
        <a id="switch-theme" class="item">@Labels.SwitchTheme</a>
    </div>
</div>
<div id="chapter-container" class="ui centered container">
    <div class="ui @(darkMode ? "inverted" : null ) segment">
        @Html.Raw(Model.content?.Content.AddImgLazyLoading("/assets/placeholder_page.png"))
    </div>
</div>
<div class="ui container">
    <div class="ui secondary massive menu @(darkMode ? "inverted" : null)">
        <a class="item @(previousChapter != null ? null : "disabled")" href="@(previousChapter != null ? Url.Action("ReadChapter", new {chapterId = previousChapter}) : null)">
            <i class="chevron left icon"></i>
            <i class="book open icon"></i>
        </a>
        <div class="right menu">
            <a class="item @(nextChapter != null ? null : "disabled")" href="@(nextChapter != null ? Url.Action("ReadChapter", new {chapterId = nextChapter}) : null)">
                <i class="book open icon"></i>
                <i class="chevron right icon"></i>
            </a>
        </div>
    </div>
</div>
<div class="ui hidden divider"></div>
@if (disqusEnabled)
{
    <div class="ui container">
        <partial name="_Disqus"/>
    </div>
}