@inject ParametersManager ParametersManager
@model (Comic comic, ComicChapter chapter)

@{
    ViewData["Title"] = $"{Labels.Chapter} {Model.chapter.Number} - {Model.comic.Name}";
    var longStrip = (bool) ViewData["LongStrip"];
    var darkMode = (string) ViewData["BodyClass"] != Constants.LightModeClasses;
    var previousChapter = (Guid?) ViewData["PreviousChapter"];
    var nextChapter = (Guid?) ViewData["NextChapter"];
    var disqusEnabled = await ParametersManager.GetValue<bool>(ParameterTypes.PageDisqusEnabled);

    if (disqusEnabled)
    {
        ViewData["DisqusIdentifier"] = $"chapter_{Model.chapter.Id}";
        ViewData["DisqusTitle"] = $"{Labels.Chapter} {Model.chapter.Number} - {Model.comic.Name}";
    }
}

@section Headers
{
    <meta property="og:title" content="@(Model.chapter.Volume != null && Model.chapter.Volume > 0 ? $"{Labels.Vol}{Model.chapter.Volume} " : null)@Labels.Chapter @Model.chapter.Number - @Model.comic.Name"/>
    <meta property="og:url" content="@Url.Action("ReadChapter", "Content", new { chapterId = Model.chapter.Id }, Context.Request.Scheme)"/>
    <meta property="og:image" content="@($"{Context.Request.Scheme}://{Context.Request.Host}/content/{Model.comic.Id}/cover_thumb.jpg")"/>
    <meta property="og:description" content="@Model.comic.Synopsis.RemoveHtmlTags()"/>
    <meta property="og:site_name" content="@(await ParametersManager.GetValue<string>(ParameterTypes.SiteName))"/>
    <script>
    const chapterContentRoute = "@Url.Action("ChapterJson", new {chapterId = Model.chapter.Id})";
    const chapterListRoute = "@Url.Action("TitlesJson", new {titleId = Model.comic.Id})";
    const previousChapterRoute = "@(previousChapter != null ? Url.Action("ReadChapter", new { chapterId = previousChapter }) : string.Empty)";
    const nextChapterRoute = "@(nextChapter != null ? Url.Action("ReadChapter", new { chapterId = nextChapter }) : string.Empty)";
    const chapterLabel = "@Labels.Chapter";
    const pageLabel = "@Labels.Page"
    const noNextChapterLabel = "@OtherMessages.NoNextChapter";
    const noPreviousChapterLabel = "@OtherMessages.NoPreviousChapter";
    const requestFailedLabel = "@OtherMessages.RequestFailed";
    const titleId = "@Model.comic.Id";
    const chapterNumber = @Html.Raw(Model.chapter.Number);
    const longStrip = @Html.Raw(Model.comic.LongStrip.ToString().ToLower());
    </script>
    <script src="~/libs/weebreader/main/reader-shared.js" asp-append-version="true"></script>
    <script src="~/libs/weebreader/main/reader-comic-shared.js" asp-append-version="true"></script>
    
    @if (longStrip)
    {
        <script src="~/libs/weebreader/main/reader-comic-longstrip.js" asp-append-version="true"></script>
    }
    else
    {
        <script src="~/libs/weebreader/main/reader-comic-multiplepages.js" asp-append-version="true"></script>
    }
}
<button id="jump-button" class="ui black button"><i class="icon chevron up no-margin-left no-margin-right"></i></button>
<div class="ui container">
    <div class="ui centered grid no-margin-top no-margin-bottom">
        <div class="row no-padding add-ellipsis"><a class="section" href="@Url.Action("Titles", new {titleId = Model.comic.Id})">@Model.comic.Name</a></div>
        <div class="row">
            <div id="chapter-selector" class="ui scrolling @(darkMode ? "inverted" : null) dropdown mr-1rem">
                <input type="hidden" value="@Url.Action("ReadChapter", new {chapterId = Model.chapter.Id})"/>
                <div class="text">@Labels.Chapter @Model.chapter.Number</div>
                <i class="dropdown icon"></i>
                <div class="menu">
                </div>
            </div>
            @if (!longStrip)
            {
                <div id="page-selector" class="ui scrolling @(darkMode ? "inverted" : null) dropdown mr-1rem">
                    <input type="hidden"/>
                    <div class="text">@Labels.Page 1</div>
                    <i class="dropdown icon"></i>
                    <div class="menu">
                    </div>
                </div>
            }
            <div id="options" class="clickable">
                <i class="eye outline @(darkMode ? "inverted" : "black") icon"></i>
            </div>
        </div>
    </div>
</div>

<div id="popup" class="ui popup bottom center hidden">
    <div class="ui link list">
        <a id="switch-view-mode" class="item">@Labels.SwitchViewMode</a>
        <a id="switch-theme" class="item">@Labels.SwitchTheme</a>
    </div>
</div>
<div id="chapter-container" class="ui center aligned fluid container">
    @if (longStrip)
    {
        <img id="skeleton-page" class="ui bordered image centered no-select-effects" src="~/assets/placeholder_page.png" alt="@Labels.Page"/>
                                                                                                                         
        @if (!Model.comic.LongStrip)
        {
            <div id="skeleton-divider" class="ui hidden divider"></div>
        }
    }
    else
    {
        <div id="page-container" class="ui dimmable clickable dp-inline-block">
            <div class="ui loader"></div>
            <img id="page" class="ui bordered centered image no-select-effects" src="~/assets/placeholder_page.png" alt="@Labels.Page"/>
        </div>
    }
</div>
<div class="ui container">
    <div class="ui secondary massive menu @(darkMode ? "inverted" : null)">
        <a class="item @(previousChapter != null ? null : "disabled")" href="@(previousChapter != null ? Url.Action("ReadChapter", new {chapterId = previousChapter}) : null)">
            <i class="chevron left icon"></i>
            <i class="book open icon"></i>
        </a>
        <div class="right menu">
            <a class="item @(nextChapter != null ? null : "disabled")" href="@(nextChapter != null ? Url.Action("ReadChapter", new {chapterId = nextChapter}) : null)">
                <i class="book open icon"></i>
                <i class="chevron right icon"></i>
            </a>
        </div>
    </div>
</div>
<div class="ui hidden divider"></div>
@if (disqusEnabled)
{
    <div class="ui container">
        <partial name="_Disqus"/>
    </div>
}