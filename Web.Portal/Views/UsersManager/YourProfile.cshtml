@model UserModel

@{
    ViewData["Title"] = Labels.YourProfile;
}

@section Headers
{
    <script>    
    $(() => {
        let changePasswordForm = $("#change-password-form");
        let changeEmailForm = $("#change-email-form");
        let changePasswordMessage = changePasswordForm.children(".message");
        let changeEmailMessage = changeEmailForm.children(".message");
        
        $("#your-profile-computer,#your-profile-mobile").addClass("active");
  
        changePasswordForm.form({
        on: "blur",
        fields: {
            password: {
                identifier: "password",
                rules: [
                    {
                        type: "empty",
                        prompt: "@ValidationMessages.PasswordRequired"
                    },
                    {
                        type: "minLength[8]",
                        prompt: "@ValidationMessages.MinimumPasswordLength"
                    }
                ]
            },
            newPassword: {
                identifier: "newPassword",
                rules: [
                    {
                        type: "empty",
                        prompt: "@ValidationMessages.NewPasswordRequired"
                    },
                    {
                        type: "minLength[8]",
                        prompt: "@ValidationMessages.MinimumPasswordLength"
                    }
                ]
            },
            repeatNewPassword: {
                identifier: "repeatNewPassword",
                rules: [
                    {
                        type: "match[newPassword]",
                        prompt: "@ValidationMessages.PasswordsMustBeEqual"
                    }
                ]
            }
        }
        }).api({
        url: "@Url.Action("ChangePassword")",
        serializeForm: true,
        method: "PATCH",
        onSuccess: response => {
            addSuccess(changePasswordMessage, response); 
            changePasswordForm.form("reset");
        },
        onFailure: response => addError(changePasswordMessage, response)
        });
                
        changeEmailForm.form({
        on: "blur",
        fields: {
            email: {
                identifier: "email",
                rules: [
                    {
                        type: "empty",
                        prompt: "@ValidationMessages.EmailRequired"
                    },
                    {
                        type: "email",
                        prompt: "@ValidationMessages.ValidEmailRequired"
                    }
                ]
            },
            repeatNewPassword: {
                identifier: "repeatEmail",
                rules: [
                    {
                        type: "match[email]",
                        prompt: "@ValidationMessages.EmailsMustBeEqual"
                    }
                ]
            }
        }
        }).api({
        url: "@Url.Action("ChangeEmail")",
        serializeForm: true,
        method: "PATCH",
        onSuccess: response => {
            addSuccess(changeEmailMessage, response);
            changeEmailForm.form("reset");
        },
        onFailure: response => addError(changeEmailMessage, response)
        });
    });
    </script>
}

<div class="ui three column stackable grid">
    <div class="center aligned column">
        @Labels.Username: @Model.Username
    </div>
    <div class="center aligned column">
        @Labels.Email: @Model.Email
    </div>
    <div class="center aligned column">
        @Labels.Role: @Model.Role
    </div>
</div>
<div class="ui two column stackable centered grid">
    <div class="column">
        <form id="change-password-form" class="ui form" novalidate>
            <div class="ui stacked segment">
                <div class="field">
                    <div class="ui left icon input">
                        <i class="lock icon"></i>
                        <input type="password" name="password" placeholder="@Labels.Password">
                    </div>
                </div>
                <div class="field">
                    <div class="ui left icon input">
                        <i class="lock icon"></i>
                        <input type="password" name="newPassword" placeholder="@Labels.NewPassword">
                    </div>
                </div>
                <div class="field">
                    <div class="ui left icon input">
                        <i class="lock icon"></i>
                        <input type="password" name="repeatNewPassword" placeholder="@Labels.RepeatNewPassword">
                    </div>
                </div>
                <div class="ui fluid large black submit button">@Labels.ChangePassword</div>
            </div>
            <div class="ui message error"></div>
        </form>
    </div>
    <div class="column">
        <form id="change-email-form" class="ui form" novalidate>
            <div class="ui stacked segment">
                <div class="field">
                    <div class="ui left icon input">
                        <i class="user icon"></i>
                        <input type="email" name="email" placeholder="@Labels.NewEmailAddress">
                    </div>
                </div>
                <div class="field">
                    <div class="ui left icon input">
                        <i class="user icon"></i>
                        <input type="email" name="repeatEmail" placeholder="@Labels.RepeatNewEmailAddress">
                    </div>
                </div>
                <div class="ui fluid large black submit button">@Labels.ChangeEmail</div>
            </div>
            <div class="ui message error"></div>
        </form>
    </div>
</div>