@inject ParametersManager ParametersManager
@model Title

@{
    ViewData["Title"] = $"{Model.Name}";
    var siteName = await ParametersManager.GetValue<string>(Parameter.Types.SiteName);
    var darkMode = (string) ViewData["BodyClass"] != Constants.LightModeClasses;
}

@section Headers
{
    <meta property="og:title" content="@Model.Name"/>
    <meta property="og:url" content="@Url.Action("Titles", "Home", new { titleId = Model.Id }, Context.Request.Scheme)"/>
    <meta property="og:image" content="@($"{Context.Request.Scheme}://{Context.Request.Host}/content/{Model.Id}/cover_thumb.jpg")"/>
    <meta property="og:description" content="@Model.Synopsis.RemoveHtmlTags()"/>
    <meta property="og:site_name" content="@siteName"/>
    <link rel="alternate" type="application/rss+xml" title="@($"{Model.Name} RSS")" href="@Url.Action("TitlesRss", "Home", new {titleId = Model.Id})"/>
    <script>
    $(() => {        
        $("#titles,#titles-mobile").addClass("active");
        
        $("#nsfw-confirm").on("click", () => {
            setCookie("seek_nsfw_content", "true", 0);
            location.reload();
        });
    });
    </script>
}
<div class="ui center aligned container">
    <div class="ui segment">
        <h1 class="ui red header">@Labels.NSFWWarningHeader</h1>
        <h3 class="ui header">@Html.Raw(@OtherMessages.NSFWMessage)</h3>
        <button id="nsfw-confirm" class="ui red button">@Labels.NSFWConfirm</button>
        <a id="nsfw-deny" href="@Url.Action("Index")" class="ui black button">@Labels.NSFWDeny</a>
    </div>
</div>