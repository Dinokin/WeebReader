@inject ParametersManager ParametersManager
@model (Comic comic, ComicChapter chapter, IEnumerable<ComicPage> pages)

@{
    ViewData["Title"] = $"{Labels.Chapter} {Model.chapter.Number} - {Model.comic.Name}";
    var siteName = await ParametersManager.GetValue<string>(Parameter.Types.SiteName);
    var pages = Model.pages.Select(page => $"/content/{Model.comic.Id}/{Model.chapter.Id}/{page.Id}{(page.Animated ? ".gif" : ".png")}").ToArray();
    var longStrip = (bool) ViewData["LongStrip"];
    var darkMode = (string) ViewData["BodyClass"] != Constants.LightModeClasses;
    var previousChapter = (Guid?) ViewData["PreviousChapter"];
    var nextChapter = (Guid?) ViewData["NextChapter"];
    var disqusEnabled = await ParametersManager.GetValue<bool>(Parameter.Types.PageDisqusEnabled);

    if (disqusEnabled)
    {
        ViewData["DisqusIdentifier"] = $"chapter_{Model.chapter.Id}";
        ViewData["DisqusTitle"] = $"{Labels.Chapter} {Model.chapter.Number} - {Model.comic.Name}";
    }
}

@section Headers
{
    <meta property="og:title" content="@(Model.chapter.Volume != null && Model.chapter.Volume > 0 ? $"{Labels.Vol}{Model.chapter.Volume} " : null)@Labels.Chapter @Model.chapter.Number - @Model.comic.Name"/>
    <meta property="og:url" content="@Url.Action("ReadChapter", "Home", new { chapterId = Model.chapter.Id }, Context.Request.Scheme)"/>
    <meta property="og:image" content="@($"{Context.Request.Scheme}://{Context.Request.Host}/content/{Model.comic.Id}/cover_thumb.jpg?v={Model.comic.Version}")"/>
    <meta property="og:description" content="@Model.comic.Synopsis.RemoveHtmlTags()"/>
    <meta property="og:site_name" content="@siteName"/>
    <!--suppress JSIncompatibleTypesComparison -->
    <script>
    $(() => {
        let jumpButton = $("#jump-button");
        
        $("#titles,#titles-mobile").addClass("active");
        $(".ui.dropdown").dropdown();
        
        $("#chapter-selector").dropdown({
        onChange: (value) => {
            if (value !== "default") {
                window.location.href = value;
            }
        },
        apiSettings: {
            url: "@Url.Action("TitlesJson", new {titleId = Model.comic.Id})",
            saveRemoteData: false,
            cache: false,
            onResponse: (response) => {
                let array = [];
                
                response.chapters.forEach(currentValue => {
                    array.push({
                    name: "@Labels.Chapter " + currentValue.number,
                    value: currentValue.readAddress,
                    text: "@Labels.Chapter " + currentValue.number,
                    class: @Html.Raw(Model.chapter.Number) === currentValue.number ? "item active selected" : "item"
                    });
                });
                
                return {
                    success: response.success,
                    results: array
                }
            }
        }
        });
        
        $("#options").popup({
        popup: $("#popup"),
        on: "click"
        });
        
        $("#switch-view-mode").on("click", () => {
            const cookieName = "@Html.Raw($"{Model.comic.Id}_long_strip")";
            
            if (getCookie(cookieName) === "true") {
                setCookie(cookieName, false, 3650);
            } else {
                setCookie(cookieName, true, 3650);
            }
            
            location.reload();
        });
       
        $("#switch-theme").on("click", () => {
            if (getCookie("reader_theme") !== "light") {
                setCookie("reader_theme", "light", 3650);
            } else {
                setCookie("reader_theme", "dark", 3650);
            }
            
            location.reload();
        });
        
        jumpButton.on("click", () => {
            scrollToTop($("#chapter-container"));
        });
        
        $(document).on("scroll", () => {
            if ($(document).scrollTop() > 125) {
                jumpButton.removeClass("dp-none");
            } else {
                jumpButton.addClass("dp-none");
            }
        });
    });
    </script>
    @if (!longStrip)
    {
        <script>
        $(() => {
            let pages = @Html.Raw(JsonConvert.SerializeObject(pages));
            let pageSelector = $("#page-selector");
            let chapterContainer = $("#chapter-container");
            let pageContainer = $("#page-container");
            let page = $("#page");
            let currentPage = 0;
            let previousChapter = "@(previousChapter != null ? Url.Action("ReadChapter", new { chapterId = previousChapter }) : string.Empty)";
            let nextChapter = "@(nextChapter != null ? Url.Action("ReadChapter", new { chapterId = nextChapter }) : string.Empty)";
            
            pageSelector.dropdown({
            onChange: (value) => {
                currentPage = Number(value);
                setPage(value);
                previousPagePreload();
                nextPagePreload();
            }
            });
            
            pageContainer.dimmer({
            closable: false,
            displayLoader: true
            });
            
            chapterContainer.on("click", (event) => {            
                let pageWidth = chapterContainer.innerWidth();
                let pageOffset = chapterContainer.offset();
                let clickLocation = event.pageX - pageOffset.left;
            
                if (pageWidth / 2 > clickLocation) {
                    goPreviousPage();
                } else {
                    goNextPage();
                }
            });
            
            
            page.on("load", () => pageContainer.dimmer("hide"));
            
            setPage();
            
            function setPage() {
                pageContainer.dimmer("show");
                page.attr("src", pages[currentPage]);
                pageSelector.dropdown("set selected", [currentPage]);
            }
            
            function goNextPage() {
                if (currentPage + 1 >= pages.length) {
                    if (nextChapter.length > 0) {
                        window.location.href = nextChapter;
                    } else {
                        $("body").toast({
                        class: "error",
                        message: "@OtherMessages.NoNextChapter"
                        });
                    }
                    
                    return;
                }

                currentPage++;
                setPage();
                scrollToTop(chapterContainer);
                nextPagePreload();
            }
        
            function goPreviousPage() {
                if (currentPage - 1 < 0) {
                    if (previousChapter.length > 0) {
                        window.location.href = previousChapter;
                    } else {
                        $("body").toast({
                        class: "error",
                        message: "@OtherMessages.NoPreviousChapter"
                        });
                    }
                    
                    return;
                }
                
                currentPage--;
                setPage();
                scrollToTop(chapterContainer);
                previousPagePreload();
            }
            
            function nextPagePreload() {
                for (let i = 1; i <= 2; i++) {
                    if (currentPage + i < pages.length) {
                        new Image().src = pages[currentPage + i];
                    }
                }
            }
            
            function previousPagePreload() {
                for (let i = 1; i <= 2; i++) {
                    if (currentPage - i >= 0) {
                        new Image().src = pages[currentPage - i];
                    }
                }
            }            
        });
        </script>
    }
    else
    {
        <script>
        $(() => {
            $("#chapter-container").children().visibility({
            type: "image",
            transition: "fade in",
            duration: 1000
            });
        });
        </script>
    }
}
<button id="jump-button" class="ui black button"><i class="icon chevron up no-margin-left no-margin-right"></i></button>
<div class="ui container">
    <div class="ui centered grid no-margin-top no-margin-bottom">
        <div class="row no-padding add-ellipsis"><a class="section" href="@Url.Action("Titles", new {titleId = Model.comic.Id})">@Model.comic.Name</a></div>
        <div class="row">
            <div id="chapter-selector" class="ui scrolling @(darkMode ? "inverted" : null) dropdown mr-1rem">
                <input type="hidden" value="@Url.Action("ReadChapter", new {chapterId = Model.chapter.Id})"/>
                <div class="text">@Labels.Chapter @Model.chapter.Number</div>
                <i class="dropdown icon"></i>
                <div class="menu">
                </div>
            </div>
            @if (!longStrip)
            {
                <div id="page-selector" class="ui scrolling @(darkMode ? "inverted" : null) dropdown mr-1rem">
                    <input type="hidden"/>
                    <div class="text">@Labels.Page 1</div>
                    <i class="dropdown icon"></i>
                    <div class="menu">
                        @for (var i = 0; i < pages.Length; i++)
                        {
                            <div class="item" data-value="@i">@Labels.Page @(i + 1)</div>
                        }
                    </div>
                </div>
            }
            <div id="options" class="clickable">
                <i class="eye outline @(darkMode ? "inverted" : "black") icon"></i>
            </div>
        </div>
    </div>
</div>

<div id="popup" class="ui popup bottom center hidden">
    <div class="ui link list">
        <a id="switch-view-mode" class="item">@Labels.SwitchViewMode</a>
        <a id="switch-theme" class="item">@Labels.SwitchTheme</a>
    </div>
</div>
<div id="chapter-container" class="ui center aligned fluid container">
    @if (longStrip)
    {
        for (var i = 0; i < pages.Length; i++)
        {
            <img class="ui bordered image centered" src="/assets/placeholder_page.png" data-src="@pages[i]" alt="Page @(i + 1)"/>

            if (!Model.comic.LongStrip && i != pages.Length - 1)
            {
                <div class="ui hidden divider"></div>
            }
        }
    }
    else
    {
        <div id="page-container" class="ui dimmable clickable dp-inline-block">
            <div class="ui loader"></div>
            <img id="page" class="ui bordered centered image"/>
        </div>
    }
</div>
<div class="ui container">
    <div class="ui secondary massive menu @(darkMode ? "inverted" : null)">
        <a class="item @(previousChapter != null ? null : "disabled")" href="@(previousChapter != null ? Url.Action("ReadChapter", new {chapterId = previousChapter}) : null)">
            <i class="chevron left icon"></i>
            <i class="book open icon"></i>
        </a>
        <div class="right menu">
            <a class="item @(nextChapter != null ? null : "disabled")" href="@(nextChapter != null ? Url.Action("ReadChapter", new {chapterId = nextChapter}) : null)">
                <i class="book open icon"></i>
                <i class="chevron right icon"></i>
            </a>
        </div>
    </div>
</div>
<div class="ui hidden divider"></div>
@if (disqusEnabled)
{
    <div class="ui container">
        <partial name="_Disqus"/>
    </div>
}