@inject ParametersManager ParametersManager
@model (Title title, Chapter chapter)

@{
    ViewData["Title"] = $"{Labels.Chapter} {Model.chapter.Number} - {Model.title.Name}";
    var siteName = await ParametersManager.GetValue<string>(Parameter.Types.SiteName);
    var darkMode = (string) ViewData["BodyClass"] != Constants.LightModeClasses;
}

@section Headers
{
    <meta property="og:title" content="@(Model.chapter.Volume != null && Model.chapter.Volume > 0 ? $"{Labels.Vol}{Model.chapter.Volume} " : null)@Labels.Ch @Model.chapter.Number - @Model.title.Name"/>
    <meta property="og:url" content="@Url.Action("ReadChapter", "Home", new { chapterId = Model.chapter.Id }, Context.Request.Scheme)"/>
    <meta property="og:image" content="@($"{Context.Request.Scheme}://{Context.Request.Host}/content/{Model.title.Id}/cover_thumb.jpg")"/>
    <meta property="og:description" content="@Model.title.Synopsis.RemoveHtmlTags()"/>
    <meta property="og:site_name" content="@siteName"/>
    <script>
    $(() => {        
        $("#titles,#titles-mobile").addClass("active");
        
        $("#nsfw-confirm").on("click", () => {
            setCookie("seek_nsfw_content", "true", 0);
            location.reload();
        });
    });
    </script>
}
<div class="ui center aligned container">
    <div class="ui @(darkMode ? "inverted" : null ) segment">
        <h1 class="ui red header">@Labels.NSFWWarningHeader</h1>
        <h3 class="ui header">@Html.Raw(@OtherMessages.NSFWMessage)</h3>
        <button id="nsfw-confirm" class="ui red button">@Labels.NSFWConfirm</button>
        <a id="nsfw-deny" href="@Url.Action("Index")" class="ui button">@Labels.NSFWDeny</a>
    </div>
</div>